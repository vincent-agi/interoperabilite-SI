networks:
  api-gateway-public:
    driver: bridge
    name: api-gateway-public
  wagon-lits-network:
    driver: bridge
    name: wagon-lits-network
  dev-materiels-network:
    driver: bridge
    name: dev-materiels-network
  kafka-network:
    driver: bridge
    name: kafka-network

services:
  # Wagon lits
  wagon-lits:
    image: lezards/wagon-lits
    platform: linux/amd64
    container_name: wagon-lits-connector
    volumes:
      - ./wagon-lits-logs:/app/logs
      - ./wagon-lits/src:/app/src
    expose:
      - "3030:3002"
    depends_on:
      db:
        condition: service_healthy
      api-gateway:
        condition: service_started
    restart: unless-stopped

    networks:
      - wagon-lits-network
      - api-gateway-public
      - kafka-network
    # Configuration API gateway wagon lits (Traefik)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wagon-lits.rule=PathPrefix(`/wagon-list`)"
      - "traefik.http.routers.wagon-lits.entrypoints=web"
      - "traefik.http.routers.wagon-lits.priority=10"
      - "traefik.http.services.wagon-lits.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.wagon-lits-security.headers.customResponseHeaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.wagon-lits-security.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.wagon-lits-security.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.wagon-lits-security.headers.customResponseHeaders.Referrer-Policy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.wagon-lits-security.headers.customResponseHeaders.Content-Security-Policy=default-src 'self'; frame-ancestors 'none'"
      - "traefik.http.routers.wagon-lits.middlewares=wagon-lits-security@docker"

  # Dev-materiels
  dev-materiels:
    image: lezards/dev-materiels
    platform: linux/amd64
    container_name: dev-materiels-connector
    expose:
      - "3040:3001"
    volumes:
      - ./dev-materiels-logs:/app/logs
      - ./dev-materiels/src:/app/src
    depends_on:
      db:
        condition: service_healthy
      api-gateway:
        condition: service_started
    restart: unless-stopped

    networks:
      - dev-materiels-network
      - api-gateway-public
      - kafka-network
    # Configuration API gateway dev-materiels (Traefik)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-materiels.rule=PathPrefix(`/dev-materiels`)"
      - "traefik.http.routers.dev-materiels.entrypoints=web"
      - "traefik.http.routers.dev-materiels.priority=10"
      - "traefik.http.services.dev-materiels.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.dev-materiels-security.headers.customResponseHeaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.dev-materiels-security.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.dev-materiels-security.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.dev-materiels-security.headers.customResponseHeaders.Referrer-Policy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.dev-materiels-security.headers.customResponseHeaders.Content-Security-Policy=default-src 'self'; frame-ancestors 'none'"
      - "traefik.http.routers.dev-materiels.middlewares=dev-materiels-security@docker"

  api-gateway:
    image: traefik:v2.10
    container_name: api-gateway
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=api-gateway-public"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro 
      - ./traefik/letsencrypt:/letsencrypt
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    restart: unless-stopped
    networks:
      - api-gateway-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.middlewares=auth,dashboard-stripprefix"
      - "traefik.http.middlewares.dashboard-stripprefix.stripprefix.prefixes=/dashboard"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH:-admin:$2y$05$9.nBPbXVyyHM4UfL/8GegOXzpVeyOTfNXYX2MwgVZ8jmw8QO3ri66}"
      - "traefik.http.middlewares.compress.compress=true"
  
  db:
    image: postgres:16
    container_name: database-si
    restart: unless-stopped
    environment:
      - POSTGRES_DB=siinteroperable
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - wagon-lits-network
      - dev-materiels-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d siinteroperable"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: db-administration
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - wagon-lits-network
      - dev-materiels-network
    depends_on:
      db:
        condition: service_healthy
        
  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
        
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: unless-stopped
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: interoperabilite-SI
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

volumes:
  db_data:
  pgadmin_data: